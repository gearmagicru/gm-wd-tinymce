/**
 * Плагин GmImage для TinyMCE.
 * 
 * Диалоговое окно выбора и добавления изображения в редактор TinyMCE с
 * возможность указания атрибутов лайтбокс изображения. 
 * 
 * Copyright (c) 2015 Веб-студия GearMagic
 * 
 * Contact: https://gearmagic.ru
 *
 * @author    Anton Tivonenko
 * @copyright (c) 2015, by Anton Tivonenko, anton.tivonenko@gmail.com
 * @date      Oct 01, 2015
 * @version   $Id: 1.0 $
 *
 * @license plugin.min.js is licensed under the terms of the Open Source
 * LGPL 3.0 license. Commercial use is permitted to the extent that the
 * code/component(s) do NOT become part of another Open Source or Commercially
 * development library or toolkit without explicit permission.
 */

/**
 * Панель атрибутов изображения (для диалога).
 * @class Gm.wd.tinymce.gmimage.Panel
 * @extends Ext.form.Panel
 */
Ext.define('Gm.wd.tinymce.gmimage.Panel', {
    extend: 'Ext.form.Panel',
    xtype: 'gm-wd-tinymce-gmimage-panel',
    mixins: ['Ext.mixin.Responsive'],
    cls: 'g-form',
    bodyPadding: 10,
    autoScroll: true,
    defaults: {
        labelAlign: 'right',
        labelWidth: 160
    },

    /**
     * @cfg {String} btnAddText
     * Текст кнопки "Добавить".
     */
    btnAddText: 'Add',
    /**
     * @cfg {String} btnAddTooltip
     * Подсказка кнопки "Добавить".
     */
    btnAddTooltip: 'Add image to text',
    /**
     * @cfg {String} btnEditText
     * Текст кнопки "Изменить".
     */
     btnEditText: 'Edit',
     /**
      * @cfg {String} btnEditTooltip
      * Подсказка кнопки "Изменить".
      */
     btnEditTooltip: 'Edit image in text',
    /**
     * @cfg {String} btnCutText
     * Текст кнопки "Вырезать".
     */
     btnCutText: 'Cut',
     /**
      * @cfg {String} btnCutTooltip
      * Подсказка кнопки "Вырезать".
      */
     btnCutTooltip: 'Cut image from text',
    /**
     * @cfg {String} btnCancelText
     * Текст кнопки "Отмена".
     */
     btnCancelText: 'Cancel',
     /**
      * @cfg {String} btnCancelTooltip
      * Подсказка кнопки "Отмена".
      */
     btnCancelTooltip: 'Close window',
     /**
      * @cfg {String} fldSrcLabel
      * Метка поля "".
      */
     fldSrcLabel: 'URL',
     /**
      * @cfg {String} fldSrcLabel
      * Подсказка для поля "".
      */
     fldSrcTooltip: 'URL of the image file ("src" attribute)',
     /**
      * @cfg {String} fldAltLabel
      * Метка поля Альтернативный текст".
      */
     fldAltLabel: 'Alternative text',
     /**
      * @cfg {String} fldAltTooltip
      * Подсказка для поля "Альтернативный текст".
      */
     fldAltTooltip: 'Alternative text description of the image (attribute "alt")',
     /**
      * @cfg {String} fldTitleLabel
      * Метка поля "Подсказка".
      */
     fldTitleLabel: 'Title',
     /**
      * @cfg {String} fldTitleTooltip
      * Подсказка для поля "Подсказка".
      */
     fldTitleTooltip: 'Image tooltip (attribute "title")',
     /**
      * @cfg {String} fldLongdescLabel
      * Метка поля "Описание".
      */
     fldLongdescLabel: 'Long description',
     /**
      * @cfg {String} fldLongdescTooltip
      * Подсказка для поля "Описание".
      */
     fldLongdescTooltip: 'Link to a more detailed description of the image (attribute "longdesc")',
     /**
      * @cfg {String} fldLoadingLabel
      * Метка поля "Загрузка".
      */
     fldLoadingLabel: 'Loading',
     /**
      * @cfg {String} fldLoadingTooltip
      * Подсказка для поля "Загрузка".
      */
     fldLoadingTooltip: 'Specifies how the browser should load the image.',
     /**
      * @cfg {String} fldFloatLabel
      * Метка поля "Обтекание".
      */
     fldFloatLabel: 'Float',
     /**
      * @cfg {String} fldFloatTooltip
      * Подсказка для поля "Обтекание".
      */
     fldFloatTooltip: 'Float text around an image',
     /**
      * @cfg {String} fldAlignLabel
      * Метка поля "Выравнивание".
      */
     fldAlignLabel: 'Align',
     /**
      * @cfg {String} fldAlignTooltip
      * Подсказка для поля "Выравнивание".
      */
     fldAlignTooltip: 'Alignment relative to text or other images on the page',
     /**
      * @cfg {String} fieldsetCss
      * Заголовок полей.
      */
     fieldsetCss: 'CSS (Cascading Style Sheets) images',
     /**
      * @cfg {String} fldCssLabel
      * Метка поля "CSS-класс".
      */
     fldCssLabel: 'CSS class',
     /**
      * @cfg {String} fldCssTooltip
      * Подсказка для поля "CSS-класс".
      */
     fldCssTooltip: 'CSS class of image in CSS file',
     /**
      * @cfg {String} fldStyleLabel
      * Метка поля "CSS-стили".
      */
     fldStyleLabel: 'CSS-стили',
     /**
      * @cfg {String} fieldsetSize
      * Заголовок полей.
      */
     fieldsetSize: 'Image size',
     /**
      * @cfg {String} fldHeightLabel
      * Метка поля "Ширина".
      */
     fldWidthLabel: 'Width',
     /**
      * @cfg {String} fldHeightLabel
      * Метка поля Высота
      */
     fldHeightLabel: 'Heigth',
     /**
      * @cfg {String} fldZoomLabel
      * Метка поля "увеличивать".
      */
     fldZoomLabel: 'zoom image on click',
    /**
     * @cfg {Array} loadingData
     * Способы загрузки изображения.
     */
    loadingData: [
        {id: 'null', text: '[ none ]'}, 
        {id: 'eager', text: 'load immediately'}, 
        {id: 'lazy', text: 'postpone loading'}
    ],
    /**
     * @cfg {Array} alignData
     * Выравнивание изображение.
     */
    alignData: [
        {id: 'null', text: '[ none ]'}, 
        {id: 'bottom', text: 'align bottom border with surrounding text'}, 
        {id: 'left', text: 'left window alignment'}, 
        {id: 'middle', text: 'align middle to baseline of current line'}, 
        {id: 'right', text: 'align to the right edge of the window'}, 
        {id: 'top', text: 'align top border to tallest line element'}
    ],
    /**
     * @cfg {Array} floatData
     * Обтекание изображения.
     */
    floatData: [
        {id: 'null', text: '[ none ]'}, 
        {id: 'left', text: 'left'}, 
        {id: 'right', text: 'right'},
    ],
    /**
     * @cfg {Object} config
     * Параметры инициализации свойств класса.
     */
    config: {
        // указатель на диалоговое окно
        dialog: undefined,
        // атрибуты изображения
        values: {
            src: '', width: '', height: '', 'class': '', style: '', alt: '', align: '', loading: '', longdesc: '', 
            title: '', zoom: 0
        }
    },

    /**
     * Инициализация компонента.
     * @param {Object} config Параметры инициализации.
     */
    initComponent: function (config) {
        this.dialog = this.up('window');
        this.initButtons();
        this.initFields();

        this.callParent(arguments);
    },

    /**
     * Создаёт URL-адрес полного изображения.
     * @param  {String} src URL-адрес миниатюры изображения.
     * @param {String} pattern Слова через ",", которые необходимо убрать, чтобы 
     * получить URL-адрес полного изображения.
     */
    makeSrcAttr: function (src, pattern) {
        let newSrc = src,
            patterns = pattern.split(',');
        for (const pattern of patterns) {
            newSrc = newSrc.replace(pattern, '');
        }
        return newSrc;
    },

    /**
     * Добавляет изображение в редактор.
     */
    addImage: function () {
        if (!this.getForm().isValid()) return;

        let values = this.getForm().getValues(), 
            attrs = [];

        // исключение для атрибута "float"
        if (values.float !== '' && values.float !== 'null') {
            values.style = 'float:' + values.float + ';' + values.style;
            delete values.float;
        }
        // исключение для атрибута "lightbox"
        if (values.zoom === 1) {
            let lb = this.dialog.lightbox;
            values[lb.attribute] = '1';
            values[lb.srcAttribute] = this.makeSrcAttr(values.src, lb.namePattern);
            delete values.zoom;
        }

        for (key in values) {
            let value = values[key];
            if (value.length > 0 && value !== 'null') {
                attrs.push(key + '="' + value + '"');
            }
        }

        this.dialog.editor.insertContent('<img ' + attrs.join(' ') + '>&nbsp;');
        this.close();
    },

    /**
     * Обновляет атрибуты выбранного изображения редактора.
     */
    updateImage: function () {
        if (!this.getForm().isValid()) return;

        let node = this.dialog.imageEl,
            img = Ext.getDom(node),
            values = this.getForm().getValues();

        // исключение для атрибута "float"
        if (values.float !== '' && values.float !== 'null') {
            values.style = 'float: ' + values.float + ';' + values.style;
            delete values.float;
        }
        // исключение для атрибута "lightbox"
        let lb = this.dialog.lightbox;
        if (values.zoom === 1) {
            values[lb.attribute] = '1';
            values[lb.srcAttribute] = this.makeSrcAttr(values.src, lb.namePattern);
            delete values.zoom;
        } else {
            img.removeAttribute(lb.attribute);
            img.removeAttribute(lb.srcAttribute);
        }
        // исключение для атрибута "src"
        img.setAttribute('data-mce-src', values.src);

        for (key in values) {
            let value = values[key];
            if (value.length > 0 && value !== 'null')
                img.setAttribute(key, value);
            else
                img.removeAttribute(key);
        }
        this.close();
    },

    /**
     * Вырезает изображение из редактора.
     */
    cutImage: function () { Ext.get(this.dialog.imageEl).remove(); this.close(); },


    /**
     * Закрывает диалоговое окно.
     */
    close: function () { this.dialog.close(); },

    /**
     * Устанавливает значения атрибутов изображения полям формы.
     */
    initValues: function () {
        if (this.dialog.isEditing()) {
            let imageEl = this.dialog.imageEl;

            for (const key in this.values) {
                if (imageEl.attributes[key] != undefined) {
                    let value = imageEl.attributes[key];
                    this.values[key] = value.value;
                } else 
                    this.values[key] = '';
            }

            // исключение для атрибута "lightbox"
            if (imageEl.hasAttribute(this.dialog.lightbox.attribute)) {
                this.values.zoom = 1;    
            }
            // исключение для атрибута "float"
            this.values.float = imageEl.style.float;
            this.values.style = Ext.util.CSS.styleToString(imageEl.style, ['float']);

            this.getForm().setValues(this.values);
        }
    },

    /**
     * Добавляет кнопки форме.
     */
    initButtons: function () {
        this.buttons = [
            {
                text: this.btnAddText,
                ui: 'form',
                tooltip: this.btnAddTooltip,
                handler: this.addImage,
                iconCls: 'g-icon-svg g-icon_size_14 g-icon-m_add',
                scope: this
            }, 
            {
                text: this.btnEditText,
                ui: 'form',
                tooltip: this.btnEditTooltip,
                handler: this.updateImage,
                iconCls: 'g-icon-svg g-icon_size_14 g-icon-m_check',
                scope: this
            }, 
            {
                text: this.btnCutText,
                ui: 'form-notice',
                tooltip: this.btnCutTooltip,
                handler: this.cutImage,
                iconCls: 'g-icon-svg g-icon_size_14 g-icon-m_cut',
                scope: this
            }, 
            {
                text: this.btnCancelText,
                ui: 'form-close',
                tooltip: this.btnCancelTooltip,
                handler: this.close,
                scope: this
            }
        ];
    },

    /**
     * Изменяет параметры кнопок формы перед выводом.
     */
    renderButtons: function () {
        let fbar = this.getDockedItems('toolbar[dock="bottom"]')[0];
        if (this.dialog.isEditing())
            fbar.items.get(0).hide();
        else {
            fbar.items.get(1).hide();
            fbar.items.get(2).hide();
            fbar.items.get(3).hide();
        }
    },

    /**
     * Добавляет поля форме.
     */
    initFields: function () {
        this.items = [
            {
                id: 'imagepanel__src',
                xtype: 'textfield',
                fieldLabel: this.fldSrcLabel,
                tooltip: this.fldSrcTooltip,
                allowBlank: false,
                anchor: '100%',
                name: 'src',
                triggers: {
                    browse: {
                        cls: 'g-form__field-trigger g-form__field-trigger_browse',
                        handler:  (field, trigger) => { Gm.app.widget.loadBy(trigger.handlerArgs); },
                        handlerArgs: {
                            route: '@backend/mediafiles/dialog',
                            params: {
                                applyTo: 'imagepanel__src',
                                alias: 'article-image',
                                mediaPath: tinymce.settings.mediaPaths['article-image']
                            }
                        }
                    }
                }
            },
            {
                xtype: 'textfield',
                fieldLabel: this.fldAltLabel,
                tooltip: this.fldAltTooltip,
                allowBlank: true,
                anchor: '100%',
                name: 'alt'
            },
            {
                xtype: 'textfield',
                fieldLabel: this.fldTitleLabel,
                tooltip: this.fldTitleTooltip,
                allowBlank: true,
                anchor: '100%',
                name: 'title'
            },
            {
                xtype: 'textfield',
                fieldLabel: this.fldLongdescLabel,
                tooltip: this.fldLongdescTooltip,
                allowBlank: true,
                anchor: '100%',
                name: 'longdesc'
            },
            {
                xtype: 'combo',
                fieldLabel: this.fldLoadingLabel,
                tooltip: this.fldLoadingTooltip,
                queryMode: 'local',
                valueField: 'id',
                store: { fields: ['id', 'text'], data: this.loadingData },
                editable: false,
                name: 'loading',
                hiddenName: 'loading',
                width: 400
            },
            {
                xtype: 'combo',
                fieldLabel: this.fldFloatLabel,
                tooltip: this.fldFloatTooltip,
                queryMode: 'local',
                valueField: 'id',
                store: { fields: ['id', 'text'], data: this.floatData },
                editable: false,
                name: 'float',
                hiddenName: 'float',
                width: 400
            },
            {
                xtype: 'combo',
                fieldLabel: this.fldAlignLabel,
                tooltip: this.fldAlignTooltip,
                queryMode: 'local',
                valueField: 'id',
                store: { fields: ['id', 'text'], data: this.alignData },
                editable: false,
                name: 'align',
                hiddenName: 'align',
                anchor: '100%'
            },
            {
                xtype: 'fieldset',
                title: this.fieldsetCss,
                items: [
                    {
                        xtype: 'textfield',
                        fieldLabel: this.fldCssLabel,
                        labelAlign: 'right',
                        tooltip: this.fldCssTooltip,
                        anchor: '100%',
                        name: 'class'
                    },
                    {
                        xtype: 'textfield',
                        fieldLabel: this.fldStyleLabel,
                        labelAlign: 'right',
                        anchor: '100%',
                        name: 'style'
                    }
                ]
            },
            {
                xtype: 'fieldset',
                title: this.fieldsetSize,
                defaults: {
                    xtype: 'textfield',
                    labelAlign: 'right',
                    width: 300
                },
                items: [
                    {
                        fieldLabel: this.fldWidthLabel,
                        name: 'width'
                    },
                    {
                        fieldLabel: this.fldHeightLabel,
                        name: 'height'
                    }
                ]
            },
            {
                xtype: 'checkbox',
                ui: 'switch',
                boxLabel: this.fldZoomLabel,
                name: 'zoom',
                inputValue: 1
            }
        ];
    },

    listeners: {
        beforerender: (me, eOpts) => {
            me.initValues();
            me.renderButtons();
        }
    }
});


/**
 * Диалоговое окно атрибутов выбранного изображения.
 * @class Gm.wd.tinymce.gmimage.Window
 * @extends Gm.view.window.Window
 */
 Ext.define('Gm.wd.tinymce.gmimage.Window', {
    extend: 'Gm.view.window.Window',
    xtype: 'gm-wd-tinymce-gmimage-window',
    cls: 'g-window_profile',
    closable: true,
    autoHeight: true,
    width: 600,
    resizable: false,
    modal: true,
    layout: 'fit',
    buttonAlign: 'right',
    responsiveConfig: {
        'height < 631': {'height': '99%'},
        'width < 600': {'width': '99%'},
    },

    /**
     * @cfg {String} addingTitle
     * Заголовок окна при дабавлении изображения.
     */
    addingTitle: 'Adding an image',
    /**
     * @cfg {String} editingTitle
     * Заголовок окна при редактировании изображения.
     */
    editingTitle: 'Editing the image',
    /**
     * @cfg {Object|null} editor
     * Указатель на текущий редактор TinyMCE.
     */
    editor: null, 
    /**
     * @cfg {HTMLElement|null} imageEl
     * Указатель на текущее изображение.
     */
    imageEl: null,
    /**
     * @cfg {Object|null} lightbox
     * Параметры лайтбокса для вставки изображения.
     */
    lightbox: null,

    /**
     * Инициализация компонента.
     * @param {Object} config Параметры инициализации.
     */
     initComponent: function (config) {
        this.initFields();

        this.callParent(arguments);
    },

    /**
     * Инициализация диалога.
     * @param {Object} editor Текущий редактор TinyMCE.
     */
    init: function (editor) {
        this.initEditor(editor);
        this.initTitle();
        return this;
    },

    /**
     * Инициализация редактора.
     * @param {Object} editor Текущий редактор.
     */
    initEditor: function (editor) {
        this.editor = editor;

        if (Ext.isDefined(editor.settings.lightbox))
            this.lightbox = editor.settings.lightbox;
        else
            this.lightbox = {attribute: 'data-lightbox', srcAttribute: 'data-src', namePattern: '_thumb'}; 

        let el = editor.selection.getNode();
        this.imageEl = (el === null ? el : (el.tagName == 'IMG' ? el : null));
    },

    /**
     * Инициализация заголовка диалогового окна.
     */
    initTitle: function () { this.title = this.isEditing() ? this.editingTitle : this.addingTitle; },

    /**
     * Инициализация элементов диалогового окна.
     */
    initFields: function () { this.items = {xtype: 'gm-wd-tinymce-gmimage-panel'}; },

    /**
     * Проверяет, находится ли окно в режиме редактирования атрибутов изображения.
     * @return {Boolean}
     */
    isEditing: function () { return this.imageEl ? true : false; }
 });


!function(){
    let manager = tinymce.util.Tools.resolve('tinymce.PluginManager');
    
    manager.add('gmimage', function (editor, url) { 
        'use strict';

        let button = null, menuItemText = null, scriptLoader = new tinymce.dom.ScriptLoader();

        scriptLoader.add(url + '/' + tinymce.settings.language +'.js');
        scriptLoader.loadQueue(function () {
            let lo = Gm.wd.tinymce.gmimage.locale;
            button.settings.tooltip = lo.btnTooltip;
            menuItemText = lo.menuItemText;
        });

        editor.addButton('gmimage', {
            image: url + '/img/icon.svg',
            tooltip: 'Add / Edit article image',
            stateSelector: 'img:not([data-mce-object],[data-mce-placeholder]),figure.image',
            onPostRender: function () { button = this; },
            onclick: () => { 
               let v =  Ext.create('Gm.wd.tinymce.gmimage.Window', {
                    icon:  url + '/img/icon.svg'
                }).init(editor).show();
            }
        });

        editor.addMenuItem('gmimage', {
            image: url + '/img/icon.svg',
            text: 'Article image',
            onPostRender: function () { 
                let title = this['$el'][0].children[1], icon = this['$el'][0].children[0];
                icon.setAttribute('class', '');
                icon.style.width = '16px';
                icon.style.height = '16px';
                icon.style.backgroundSize = 'cover';
                title.innerText = menuItemText;
            },
            onclick: () => { 
                Ext.create('Gm.wd.tinymce.gmimage.Window', {
                    icon:  url + '/img/icon.svg'
                }).init(editor).show();
            },
            context: 'insert'
        })
        // tinyMCE.activeEditor.theme.panel.rootControl.controlIdLookup
    });
}();