/**
 * Плагин GmLink для TinyMCE.
 * 
 * Диалоговое окно выбора и добавления файла в редактор TinyMCE. 
 * 
 * Copyright (c) 2015 Веб-студия GearMagic
 * 
 * Contact: https://gearmagic.ru
 *
 * @author    Anton Tivonenko
 * @copyright (c) 2015, by Anton Tivonenko, anton.tivonenko@gmail.com
 * @date      Oct 01, 2015
 * @version   $Id: 1.0 $
 *
 * @license plugin.min.js is licensed under the terms of the Open Source
 * LGPL 3.0 license. Commercial use is permitted to the extent that the
 * code/component(s) do NOT become part of another Open Source or Commercially
 * development library or toolkit without explicit permission.
 */

/**
 * Панель атрибутов ссылки на файл (для диалога).
 * @class Gm.wd.tinymce.gmlink.Panel
 * @extends Ext.form.Panel
 */
Ext.define('Gm.wd.tinymce.gmlink.Panel', {
    extend: 'Ext.form.Panel',
    xtype: 'gm-wd-tinymce-gmlink-panel',
    mixins: ['Ext.mixin.Responsive'],
    cls: 'g-form',
    bodyPadding: 10,
    autoScroll: true,
    defaults: {
        labelAlign: 'right',
        labelWidth: 140
    },

    /**
     * @cfg {String} btnAddText
     * Текст кнопки "Добавить".
     */
    btnAddText: 'Add',
    /**
     * @cfg {String} btnAddTooltip
     * Подсказка кнопки "Добавить".
     */
    btnAddTooltip: 'Add file link to text',
    /**
     * @cfg {String} btnEditText
     * Текст кнопки "Изменить".
     */
     btnEditText: 'Edit',
     /**
      * @cfg {String} btnEditTooltip
      * Подсказка кнопки "Изменить".
      */
     btnEditTooltip: 'Edit file link in text',
    /**
     * @cfg {String} btnCutText
     * Текст кнопки "Вырезать".
     */
     btnCutText: 'Cut',
     /**
      * @cfg {String} btnCutTooltip
      * Подсказка кнопки "Вырезать".
      */
     btnCutTooltip: 'Cut file link from text',
    /**
     * @cfg {String} btnCancelText
     * Текст кнопки "Отмена".
     */
     btnCancelText: 'Cancel',
     /**
      * @cfg {String} btnCancelTooltip
      * Подсказка кнопки "Отмена".
      */
     btnCancelTooltip: 'Close window',
     /**
      * @cfg {String} fldHrefLabel
      * Метка поля "URL-адрес".
      */
     fldHrefLabel: 'URL',
     /**
      * @cfg {String} fldHrefTooltip
      * Подсказка для поля "URL-адрес".
      */
     fldHrefTooltip: 'URL of the file (attribute "href")',
     /**
      * @cfg {String} fldTextLabel
      * Метка поля "Текст".
      */
      fldTextLabel: 'Text link',
     /**
      * @cfg {String} fldTitleLabel
      * Метка поля "Подсказка".
      */
     fldTitleLabel: 'Title',
     /**
      * @cfg {String} fldTitleTooltip
      * Подсказка для поля "Подсказка".
      */
     fldTitleTooltip: 'File link tooltip (attribute "title")',
     /**
      * @cfg {String} fldTargetLabel
      * Метка поля "Цель".
      */
     fldTargetLabel: 'Target',
     /**
      * @cfg {String} fldLoadingTooltip
      * Подсказка для поля "Цель".
      */
     fldTargetTooltip: 'Action when clicking on a link (attribute "target").',
    /**
     * @cfg {Array} targetData
     * Действие при нажатии на ссылку.
     */
    targetData: [
        {id: 'null', text: '[ none ]'}, 
        {id: '_blank', text: 'open in a new window'}
    ],
    /**
     * @cfg {Object} config
     * Параметры инициализации свойств класса.
     */
    config: {
        // указатель на диалоговое окно
        dialog: undefined,
        // атрибуты ссылки
        values: {href: '', target: '', title: '', text: ''}
    },

    /**
     * Инициализация компонента.
     * @param {Object} config Параметры инициализации.
     */
    initComponent: function (config) {
        this.dialog = this.up('window');
        this.initButtons();
        this.initFields();

        this.callParent(arguments);
    },

    /**
     * Добавляет ссылку в редактор.
     */
    addLink: function () {
        if (!this.getForm().isValid()) return;

        let values = this.getForm().getValues(), 
            attrs = [];


        // исключение для атрибута "lightbox"
        let text = values.text;
        delete values.text;

        for (key in values) {
            let value = values[key];
            if (value.length > 0 && value !== 'null') {
                attrs.push(key + '="' + value + '"');
            }
        }

        this.dialog.editor.insertContent('<a ' + attrs.join(' ') + '>' + text + '</a>');
        this.close();
    },

    /**
     * Обновляет атрибуты выбранной ссылки редактора.
     */
    updateLink: function () {
        if (!this.getForm().isValid()) return;

        let node = this.dialog.linkEl,
            link = Ext.getDom(node),
            values = this.getForm().getValues();

        // исключение для атрибута "text"
        link.innerText = values.text;
        delete values.text;
        
        for (key in values) {
            let value = values[key];
            if (value.length > 0 && value !== 'null')
                link.setAttribute(key, value);
            else
                link.removeAttribute(key);
        }
        this.close();
    },

    /**
     * Вырезает ссылку из редактора.
     */
    cutLink: function () { Ext.get(this.dialog.linkEl).remove(); this.close(); },


    /**
     * Закрывает диалоговое окно.
     */
    close: function () { this.dialog.close(); },

    /**
     * Устанавливает значения атрибутов ссылки полям формы.
     */
    initValues: function () {
        if (this.dialog.isEditing()) {
            let linkEl = this.dialog.linkEl;

            for (const key in this.values) {
                if (linkEl.attributes[key] != undefined) {
                    let value = linkEl.attributes[key];
                    this.values[key] = value.value;
                } else 
                    this.values[key] = '';
            }

            // исключение для атрибута "text"
            this.values.text = linkEl.innerText;
            this.getForm().setValues(this.values);
        }
    },

    /**
     * Добавляет кнопки форме.
     */
    initButtons: function () {
        this.buttons = [
            {
                text: this.btnAddText,
                ui: 'form',
                tooltip: this.btnAddTooltip,
                handler: this.addLink,
                iconCls: 'g-icon-svg g-icon_size_14 g-icon-m_add',
                scope: this
            }, 
            {
                text: this.btnEditText,
                ui: 'form',
                tooltip: this.btnEditTooltip,
                handler: this.updateLink,
                iconCls: 'g-icon-svg g-icon_size_14 g-icon-m_check',
                scope: this
            }, 
            {
                text: this.btnCutText,
                ui: 'form-notice',
                tooltip: this.btnCutTooltip,
                handler: this.cutLink,
                iconCls: 'g-icon-svg g-icon_size_14 g-icon-m_cut',
                scope: this
            }, 
            {
                text: this.btnCancelText,
                ui: 'form-close',
                tooltip: this.btnCancelTooltip,
                handler: this.close,
                scope: this
            }
        ];
    },

    /**
     * Изменяет параметры кнопок формы перед выводом.
     */
    renderButtons: function () {
        let fbar = this.getDockedItems('toolbar[dock="bottom"]')[0];
        if (this.dialog.isEditing())
            fbar.items.get(0).hide();
        else {
            fbar.items.get(1).hide();
            fbar.items.get(2).hide();
            fbar.items.get(3).hide();
        }
    },

    /**
     * Добавляет поля форме.
     */
    initFields: function () {
        this.items = [
            {
                id: 'linkpanel__href',
                xtype: 'textfield',
                fieldLabel: this.fldHrefLabel,
                tooltip: this.fldHrefTooltip,
                allowBlank: false,
                anchor: '100%',
                name: 'href',
                triggers: {
                    browse: {
                        cls: 'g-form__field-trigger g-form__field-trigger_browse',
                        handler:  (field, trigger) => { Gm.app.widget.loadBy(trigger.handlerArgs); },
                        handlerArgs: {
                            route: '@backend/mediafiles/dialog',
                            params: {
                                applyTo: 'linkpanel__href',
                                alias: 'article-doc',
                                mediaPath: tinymce.settings.mediaPaths['article-doc']
                            }
                        }
                    }
                }
            },
            {
                xtype: 'textfield',
                fieldLabel: this.fldTextLabel,
                allowBlank: false,
                anchor: '100%',
                name: 'text'
            },
            {
                xtype: 'textfield',
                fieldLabel: this.fldTitleLabel,
                tooltip: this.fldTitleTooltip,
                allowBlank: true,
                anchor: '100%',
                name: 'title'
            },
            {
                xtype: 'combo',
                fieldLabel: this.fldTargetLabel,
                tooltip: this.fldTargetTooltip,
                queryMode: 'local',
                valueField: 'id',
                store: { fields: ['id', 'text'], data: this.targetData },
                editable: false,
                name: 'target',
                hiddenName: 'target',
                width: 400
            }
        ];
    },

    listeners: {
        beforerender: (me, eOpts) => {
            me.initValues();
            me.renderButtons();
        }
    }
});


/**
 * Диалоговое окно атрибутов выбранной ссылки.
 * @class Gm.wd.tinymce.gmlink.Window
 * @extends Gm.view.window.Window
 */
 Ext.define('Gm.wd.tinymce.gmlink.Window', {
    extend: 'Gm.view.window.Window',
    xtype: 'gm-wd-tinymce-gmlink-window',
    cls: 'g-window_profile',
    closable: true,
    autoHeight: true,
    width: 550,
    resizable: false,
    modal: true,
    layout: 'fit',
    buttonAlign: 'right',
    responsiveConfig: {
        'height < 250': {'height': '99%'},
        'width < 600': {'width': '99%'},
    },

    /**
     * @cfg {String} addingTitle
     * Заголовок окна при дабавлении ссылки.
     */
    addingTitle: 'Adding an link',
    /**
     * @cfg {String} editingTitle
     * Заголовок окна при редактировании ссылки.
     */
    editingTitle: 'Editing the link',
    /**
     * @cfg {Object|null} editor
     * Указатель на текущий редактор TinyMCE.
     */
    editor: null, 
    /**
     * @cfg {HTMLElement|null} linkEl
     * Указатель на текущее ссылку.
     */
    linkEl: null,

    /**
     * Инициализация компонента.
     * @param {Object} config Параметры инициализации.
     */
     initComponent: function (config) {
        this.initFields();

        this.callParent(arguments);
    },

    /**
     * Инициализация диалога.
     * @param {Object} editor Текущий редактор TinyMCE.
     */
    init: function (editor) {
        this.initEditor(editor);
        this.initTitle();
        return this;
    },

    /**
     * Инициализация редактора.
     * @param {Object} editor Текущий редактор.
     */
    initEditor: function (editor) {
        this.editor = editor;

        let el = editor.selection.getNode();
        this.linkEl = (el === null ? el : (el.tagName == 'A' ? el : null));
    },

    /**
     * Инициализация заголовка диалогового окна.
     */
    initTitle: function () { this.title = this.isEditing() ? this.editingTitle : this.addingTitle; },

    /**
     * Инициализация элементов диалогового окна.
     */
    initFields: function () { this.items = {xtype: 'gm-wd-tinymce-gmlink-panel'}; },

    /**
     * Проверяет, находится ли окно в режиме редактирования атрибутов изображения.
     * @return {Boolean}
     */
    isEditing: function () { return this.linkEl ? true : false; }
 });


!function(){
    let manager = tinymce.util.Tools.resolve('tinymce.PluginManager');
    
    manager.add('gmlink', function (editor, url) { 
        'use strict';

        let button = null, menuItemText = null, scriptLoader = new tinymce.dom.ScriptLoader();

        editor.addButton('gmlink', {
            image: url + '/img/icon.svg',
            tooltip: 'Add / Edit file link',
            stateSelector: 'a:not([data-mce-object],[data-mce-placeholder]),figure.a',
            onPostRender: function () { button = this; },
            onclick: () => { 
               Ext.create('Gm.wd.tinymce.gmlink.Window', {
                    icon:  url + '/img/icon-white.svg'
                }).init(editor).show();
            }
        });

        editor.addMenuItem('gmlink', {
            image: url + '/img/icon.svg',
            text: 'File link',
            onPostRender: function () { 
                let title = this['$el'][0].children[1], icon = this['$el'][0].children[0];
                icon.setAttribute('class', '');
                icon.style.width = '16px';
                icon.style.height = '16px';
                icon.style.backgroundSize = 'cover';
                title.innerText = menuItemText;
            },
            onclick: () => { 
                Ext.create('Gm.wd.tinymce.gmlink.Window', {
                    icon:  url + '/img/icon.svg'
                }).init(editor).show();
            },
            context: 'insert'
        })

        scriptLoader.add(url + '/' + tinymce.settings.language +'.js');
        scriptLoader.loadQueue(function () {
            let lo = Gm.wd.tinymce.gmlink.locale;
            button.settings.tooltip = lo.btnTooltip;
            menuItemText = lo.menuItemText;
        });
    });
}();